# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Book(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, book_id: str=None, title: str=None, author: str=None, genre: str=None, year: str=None):  # noqa: E501
        """Book - a model defined in Swagger

        :param book_id: The book_id of this Book.  # noqa: E501
        :type book_id: str
        :param title: The title of this Book.  # noqa: E501
        :type title: str
        :param author: The author of this Book.  # noqa: E501
        :type author: str
        :param genre: The genre of this Book.  # noqa: E501
        :type genre: str
        :param year: The year of this Book.  # noqa: E501
        :type year: str
        """
        self.swagger_types = {
            'book_id': str,
            'title': str,
            'author': str,
            'genre': str,
            'year': str
        }

        self.attribute_map = {
            'book_id': 'book_id',
            'title': 'title',
            'author': 'author',
            'genre': 'genre',
            'year': 'year'
        }
        self._book_id = book_id
        self._title = title
        self._author = author
        self._genre = genre
        self._year = year

    @classmethod
    def from_dict(cls, dikt) -> 'Book':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Book of this Book.  # noqa: E501
        :rtype: Book
        """
        return util.deserialize_model(dikt, cls)

    @property
    def book_id(self) -> str:
        """Gets the book_id of this Book.


        :return: The book_id of this Book.
        :rtype: str
        """
        return self._book_id

    @book_id.setter
    def book_id(self, book_id: str):
        """Sets the book_id of this Book.


        :param book_id: The book_id of this Book.
        :type book_id: str
        """

        self._book_id = book_id

    @property
    def title(self) -> str:
        """Gets the title of this Book.

        Название книги  # noqa: E501

        :return: The title of this Book.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this Book.

        Название книги  # noqa: E501

        :param title: The title of this Book.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def author(self) -> str:
        """Gets the author of this Book.

        Автор книги  # noqa: E501

        :return: The author of this Book.
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author: str):
        """Sets the author of this Book.

        Автор книги  # noqa: E501

        :param author: The author of this Book.
        :type author: str
        """
        if author is None:
            raise ValueError("Invalid value for `author`, must not be `None`")  # noqa: E501

        self._author = author

    @property
    def genre(self) -> str:
        """Gets the genre of this Book.

        Жанр  # noqa: E501

        :return: The genre of this Book.
        :rtype: str
        """
        return self._genre

    @genre.setter
    def genre(self, genre: str):
        """Sets the genre of this Book.

        Жанр  # noqa: E501

        :param genre: The genre of this Book.
        :type genre: str
        """
        if genre is None:
            raise ValueError("Invalid value for `genre`, must not be `None`")  # noqa: E501

        self._genre = genre

    @property
    def year(self) -> str:
        """Gets the year of this Book.

        Год выпуска  # noqa: E501

        :return: The year of this Book.
        :rtype: str
        """
        return self._year

    @year.setter
    def year(self, year: str):
        """Sets the year of this Book.

        Год выпуска  # noqa: E501

        :param year: The year of this Book.
        :type year: str
        """
        if year is None:
            raise ValueError("Invalid value for `year`, must not be `None`")  # noqa: E501

        self._year = year
